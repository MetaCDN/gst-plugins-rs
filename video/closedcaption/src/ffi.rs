/* automatically generated by rust-bindgen */

pub const EIA608_CHAR_COUNT: u32 = 176;
pub const EIA608_CHAR_NULL: &'static [u8; 1usize] = b"\0";
pub const EIA608_CHAR_SPACE: &'static [u8; 2usize] = b" \0";
pub const EIA608_CHAR_EXCLAMATION_MARK: &'static [u8; 2usize] = b"!\0";
pub const EIA608_CHAR_QUOTATION_MARK: &'static [u8; 2usize] = b"\"\0";
pub const EIA608_CHAR_NUMBER_SIGN: &'static [u8; 2usize] = b"#\0";
pub const EIA608_CHAR_DOLLAR_SIGN: &'static [u8; 2usize] = b"$\0";
pub const EIA608_CHAR_PERCENT_SIGN: &'static [u8; 2usize] = b"%\0";
pub const EIA608_CHAR_AMPERSAND: &'static [u8; 2usize] = b"&\0";
pub const EIA608_CHAR_LEFT_SINGLE_QUOTATION_MARK: &'static [u8; 4usize] = b"\xE2\x80\x98\0";
pub const EIA608_CHAR_LEFT_PARENTHESIS: &'static [u8; 2usize] = b"(\0";
pub const EIA608_CHAR_RIGHT_PARENTHESIS: &'static [u8; 2usize] = b")\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\xA1\0";
pub const EIA608_CHAR_PLUS_SIGN: &'static [u8; 2usize] = b"+\0";
pub const EIA608_CHAR_COMMA: &'static [u8; 2usize] = b",\0";
pub const EIA608_CHAR_HYPHEN_MINUS: &'static [u8; 2usize] = b"-\0";
pub const EIA608_CHAR_FULL_STOP: &'static [u8; 2usize] = b".\0";
pub const EIA608_CHAR_SOLIDUS: &'static [u8; 2usize] = b"/\0";
pub const EIA608_CHAR_DIGIT_ZERO: &'static [u8; 2usize] = b"0\0";
pub const EIA608_CHAR_DIGIT_ONE: &'static [u8; 2usize] = b"1\0";
pub const EIA608_CHAR_DIGIT_TWO: &'static [u8; 2usize] = b"2\0";
pub const EIA608_CHAR_DIGIT_THREE: &'static [u8; 2usize] = b"3\0";
pub const EIA608_CHAR_DIGIT_FOUR: &'static [u8; 2usize] = b"4\0";
pub const EIA608_CHAR_DIGIT_FIVE: &'static [u8; 2usize] = b"5\0";
pub const EIA608_CHAR_DIGIT_SIX: &'static [u8; 2usize] = b"6\0";
pub const EIA608_CHAR_DIGIT_SEVEN: &'static [u8; 2usize] = b"7\0";
pub const EIA608_CHAR_DIGIT_EIGHT: &'static [u8; 2usize] = b"8\0";
pub const EIA608_CHAR_DIGIT_NINE: &'static [u8; 2usize] = b"9\0";
pub const EIA608_CHAR_COLON: &'static [u8; 2usize] = b":\0";
pub const EIA608_CHAR_SEMICOLON: &'static [u8; 2usize] = b";\0";
pub const EIA608_CHAR_LESS_THAN_SIGN: &'static [u8; 2usize] = b"<\0";
pub const EIA608_CHAR_EQUALS_SIGN: &'static [u8; 2usize] = b"=\0";
pub const EIA608_CHAR_GREATER_THAN_SIGN: &'static [u8; 2usize] = b">\0";
pub const EIA608_CHAR_QUESTION_MARK: &'static [u8; 2usize] = b"?\0";
pub const EIA608_CHAR_COMMERCIAL_AT: &'static [u8; 2usize] = b"@\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A: &'static [u8; 2usize] = b"A\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_B: &'static [u8; 2usize] = b"B\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_C: &'static [u8; 2usize] = b"C\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_D: &'static [u8; 2usize] = b"D\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_E: &'static [u8; 2usize] = b"E\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_F: &'static [u8; 2usize] = b"F\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_G: &'static [u8; 2usize] = b"G\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_H: &'static [u8; 2usize] = b"H\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_I: &'static [u8; 2usize] = b"I\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_J: &'static [u8; 2usize] = b"J\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_K: &'static [u8; 2usize] = b"K\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_L: &'static [u8; 2usize] = b"L\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_M: &'static [u8; 2usize] = b"M\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_N: &'static [u8; 2usize] = b"N\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O: &'static [u8; 2usize] = b"O\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_P: &'static [u8; 2usize] = b"P\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_Q: &'static [u8; 2usize] = b"Q\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_R: &'static [u8; 2usize] = b"R\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_S: &'static [u8; 2usize] = b"S\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_T: &'static [u8; 2usize] = b"T\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_U: &'static [u8; 2usize] = b"U\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_V: &'static [u8; 2usize] = b"V\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_W: &'static [u8; 2usize] = b"W\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_X: &'static [u8; 2usize] = b"X\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_Y: &'static [u8; 2usize] = b"Y\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_Z: &'static [u8; 2usize] = b"Z\0";
pub const EIA608_CHAR_LEFT_SQUARE_BRACKET: &'static [u8; 2usize] = b"[\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_E_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\xA9\0";
pub const EIA608_CHAR_RIGHT_SQUARE_BRACKET: &'static [u8; 2usize] = b"]\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_I_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\xAD\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\xB3\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_U_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\xBA\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A: &'static [u8; 2usize] = b"a\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_B: &'static [u8; 2usize] = b"b\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_C: &'static [u8; 2usize] = b"c\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_D: &'static [u8; 2usize] = b"d\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_E: &'static [u8; 2usize] = b"e\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_F: &'static [u8; 2usize] = b"f\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_G: &'static [u8; 2usize] = b"g\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_H: &'static [u8; 2usize] = b"h\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_I: &'static [u8; 2usize] = b"i\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_J: &'static [u8; 2usize] = b"j\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_K: &'static [u8; 2usize] = b"k\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_L: &'static [u8; 2usize] = b"l\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_M: &'static [u8; 2usize] = b"m\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_N: &'static [u8; 2usize] = b"n\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O: &'static [u8; 2usize] = b"o\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_P: &'static [u8; 2usize] = b"p\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_Q: &'static [u8; 2usize] = b"q\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_R: &'static [u8; 2usize] = b"r\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_S: &'static [u8; 2usize] = b"s\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_T: &'static [u8; 2usize] = b"t\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_U: &'static [u8; 2usize] = b"u\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_V: &'static [u8; 2usize] = b"v\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_W: &'static [u8; 2usize] = b"w\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_X: &'static [u8; 2usize] = b"x\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_Y: &'static [u8; 2usize] = b"y\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_Z: &'static [u8; 2usize] = b"z\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_C_WITH_CEDILLA: &'static [u8; 3usize] = b"\xC3\xA7\0";
pub const EIA608_CHAR_DIVISION_SIGN: &'static [u8; 3usize] = b"\xC3\xB7\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_N_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\x91\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_N_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\xB1\0";
pub const EIA608_CHAR_FULL_BLOCK: &'static [u8; 4usize] = b"\xE2\x96\x88\0";
pub const EIA608_CHAR_REGISTERED_SIGN: &'static [u8; 3usize] = b"\xC2\xAE\0";
pub const EIA608_CHAR_DEGREE_SIGN: &'static [u8; 3usize] = b"\xC2\xB0\0";
pub const EIA608_CHAR_VULGAR_FRACTION_ONE_HALF: &'static [u8; 3usize] = b"\xC2\xBD\0";
pub const EIA608_CHAR_INVERTED_QUESTION_MARK: &'static [u8; 3usize] = b"\xC2\xBF\0";
pub const EIA608_CHAR_TRADE_MARK_SIGN: &'static [u8; 4usize] = b"\xE2\x84\xA2\0";
pub const EIA608_CHAR_CENT_SIGN: &'static [u8; 3usize] = b"\xC2\xA2\0";
pub const EIA608_CHAR_POUND_SIGN: &'static [u8; 3usize] = b"\xC2\xA3\0";
pub const EIA608_CHAR_EIGHTH_NOTE: &'static [u8; 4usize] = b"\xE2\x99\xAA\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\xA0\0";
pub const EIA608_CHAR_NO_BREAK_SPACE: &'static [u8; 3usize] = b"\xC2\xA0\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_E_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\xA8\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\xA2\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\xAA\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\xAE\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\xB4\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\xBB\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\x81\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_E_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\x89\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\x93\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_U_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\x9A\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\x9C\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_U_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\xBC\0";
pub const EIA608_CHAR_RIGHT_SINGLE_QUOTATION_MARK: &'static [u8; 4usize] = b"\xE2\x80\x99\0";
pub const EIA608_CHAR_INVERTED_EXCLAMATION_MARK: &'static [u8; 3usize] = b"\xC2\xA1\0";
pub const EIA608_CHAR_ASTERISK: &'static [u8; 2usize] = b"*\0";
pub const EIA608_CHAR_APOSTROPHE: &'static [u8; 2usize] = b"'\0";
pub const EIA608_CHAR_EM_DASH: &'static [u8; 4usize] = b"\xE2\x80\x94\0";
pub const EIA608_CHAR_COPYRIGHT_SIGN: &'static [u8; 3usize] = b"\xC2\xA9\0";
pub const EIA608_CHAR_SERVICE_MARK: &'static [u8; 4usize] = b"\xE2\x84\xA0\0";
pub const EIA608_CHAR_BULLET: &'static [u8; 4usize] = b"\xE2\x80\xA2\0";
pub const EIA608_CHAR_LEFT_DOUBLE_QUOTATION_MARK: &'static [u8; 4usize] = b"\xE2\x80\x9C\0";
pub const EIA608_CHAR_RIGHT_DOUBLE_QUOTATION_MARK: &'static [u8; 4usize] = b"\xE2\x80\x9D\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\x80\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\x82\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_C_WITH_CEDILLA: &'static [u8; 3usize] = b"\xC3\x87\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_E_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\x88\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\x8A\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\x8B\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_E_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\xAB\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\x8E\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\x8F\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_I_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\xAF\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\x94\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_U_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\x99\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_U_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\xB9\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX: &'static [u8; 3usize] = b"\xC3\x9B\0";
pub const EIA608_CHAR_LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK: &'static [u8; 3usize] =
    b"\xC2\xAB\0";
pub const EIA608_CHAR_RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK: &'static [u8; 3usize] =
    b"\xC2\xBB\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\x83\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\xA3\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_I_WITH_ACUTE: &'static [u8; 3usize] = b"\xC3\x8D\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_I_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\x8C\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_I_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\xAC\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\x92\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_GRAVE: &'static [u8; 3usize] = b"\xC3\xB2\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\x95\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_TILDE: &'static [u8; 3usize] = b"\xC3\xB5\0";
pub const EIA608_CHAR_LEFT_CURLY_BRACKET: &'static [u8; 2usize] = b"{\0";
pub const EIA608_CHAR_RIGHT_CURLY_BRACKET: &'static [u8; 2usize] = b"}\0";
pub const EIA608_CHAR_REVERSE_SOLIDUS: &'static [u8; 2usize] = b"\\\0";
pub const EIA608_CHAR_CIRCUMFLEX_ACCENT: &'static [u8; 2usize] = b"^\0";
pub const EIA608_CHAR_LOW_LINE: &'static [u8; 2usize] = b"_\0";
pub const EIA608_CHAR_VERTICAL_LINE: &'static [u8; 2usize] = b"|\0";
pub const EIA608_CHAR_TILDE: &'static [u8; 2usize] = b"~\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\x84\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\xA4\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\x96\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_DIAERESIS: &'static [u8; 3usize] = b"\xC3\xB6\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_SHARP_S: &'static [u8; 3usize] = b"\xC3\x9F\0";
pub const EIA608_CHAR_YEN_SIGN: &'static [u8; 3usize] = b"\xC2\xA5\0";
pub const EIA608_CHAR_CURRENCY_SIGN: &'static [u8; 3usize] = b"\xC2\xA4\0";
pub const EIA608_CHAR_BROKEN_BAR: &'static [u8; 3usize] = b"\xC2\xA6\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE: &'static [u8; 3usize] = b"\xC3\x85\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_A_WITH_RING_ABOVE: &'static [u8; 3usize] = b"\xC3\xA5\0";
pub const EIA608_CHAR_LATIN_CAPITAL_LETTER_O_WITH_STROKE: &'static [u8; 3usize] = b"\xC3\x98\0";
pub const EIA608_CHAR_LATIN_SMALL_LETTER_O_WITH_STROKE: &'static [u8; 3usize] = b"\xC3\xB8\0";
pub const EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT: &'static [u8; 4usize] = b"\xE2\x94\x8C\0";
pub const EIA608_CHAR_BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT: &'static [u8; 4usize] = b"\xE2\x94\x90\0";
pub const EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_RIGHT: &'static [u8; 4usize] = b"\xE2\x94\x94\0";
pub const EIA608_CHAR_BOX_DRAWINGS_LIGHT_UP_AND_LEFT: &'static [u8; 4usize] = b"\xE2\x94\x98\0";
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 30;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCREEN_ROWS: u32 = 15;
pub const SCREEN_COLS: u32 = 32;
pub const CAPTION_FRAME_TEXT_BYTES: u32 = 2041;
pub const CAPTION_FRAME_DUMP_BUF_SIZE: u32 = 8192;
extern "C" {
    pub static mut eia608_char_map: [*const ::std::os::raw::c_char; 176usize];
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type utf8_char_t = ::std::os::raw::c_char;
pub type utf8_size_t = usize;
extern "C" {
    pub fn utf8_char_next(c: *const utf8_char_t) -> *const utf8_char_t;
}
extern "C" {
    pub fn utf8_char_length(c: *const utf8_char_t) -> usize;
}
extern "C" {
    pub fn utf8_char_whitespace(c: *const utf8_char_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_string_length(data: *const utf8_char_t, size: utf8_size_t) -> usize;
}
extern "C" {
    pub fn utf8_char_copy(dst: *mut utf8_char_t, src: *const utf8_char_t) -> usize;
}
extern "C" {
    pub fn utf8_char_count(data: *const ::std::os::raw::c_char, size: usize) -> utf8_size_t;
}
extern "C" {
    pub fn utf8_trimmed_length(data: *const utf8_char_t, charcters: utf8_size_t) -> utf8_size_t;
}
extern "C" {
    pub fn utf8_line_length(data: *const utf8_char_t) -> usize;
}
extern "C" {
    pub fn utf8_wrap_length(data: *const utf8_char_t, size: utf8_size_t) -> utf8_size_t;
}
extern "C" {
    pub fn utf8_line_count(data: *const utf8_char_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_load_text_file(
        path: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut utf8_char_t;
}
extern "C" {
    pub fn strnstr(
        string1: *const ::std::os::raw::c_char,
        string2: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static eia608_parity_table: [u8; 128usize];
}
extern "C" {
    pub static mut eia608_style_map: [*const ::std::os::raw::c_char; 0usize];
}
pub const eia608_style_t_eia608_style_white: eia608_style_t = 0;
pub const eia608_style_t_eia608_style_green: eia608_style_t = 1;
pub const eia608_style_t_eia608_style_blue: eia608_style_t = 2;
pub const eia608_style_t_eia608_style_cyan: eia608_style_t = 3;
pub const eia608_style_t_eia608_style_red: eia608_style_t = 4;
pub const eia608_style_t_eia608_style_yellow: eia608_style_t = 5;
pub const eia608_style_t_eia608_style_magenta: eia608_style_t = 6;
pub const eia608_style_t_eia608_style_italics: eia608_style_t = 7;
pub type eia608_style_t = u32;
extern "C" {
    pub fn eia608_parse_preamble(
        cc_data: u16,
        row: *mut ::std::os::raw::c_int,
        col: *mut ::std::os::raw::c_int,
        style: *mut eia608_style_t,
        chan: *mut ::std::os::raw::c_int,
        underline: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eia608_parse_midrowchange(
        cc_data: u16,
        chan: *mut ::std::os::raw::c_int,
        style: *mut eia608_style_t,
        underline: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eia608_row_column_pramble(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        underline: ::std::os::raw::c_int,
    ) -> u16;
}
extern "C" {
    pub fn eia608_row_style_pramble(
        row: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        style: eia608_style_t,
        underline: ::std::os::raw::c_int,
    ) -> u16;
}
extern "C" {
    pub fn eia608_midrow_change(
        chan: ::std::os::raw::c_int,
        style: eia608_style_t,
        underline: ::std::os::raw::c_int,
    ) -> u16;
}
pub const eia608_control_t_eia608_tab_offset_0: eia608_control_t = 5920;
pub const eia608_control_t_eia608_tab_offset_1: eia608_control_t = 5921;
pub const eia608_control_t_eia608_tab_offset_2: eia608_control_t = 5922;
pub const eia608_control_t_eia608_tab_offset_3: eia608_control_t = 5923;
pub const eia608_control_t_eia608_control_resume_caption_loading: eia608_control_t = 5152;
pub const eia608_control_t_eia608_control_backspace: eia608_control_t = 5153;
pub const eia608_control_t_eia608_control_alarm_off: eia608_control_t = 5154;
pub const eia608_control_t_eia608_control_alarm_on: eia608_control_t = 5155;
pub const eia608_control_t_eia608_control_delete_to_end_of_row: eia608_control_t = 5156;
pub const eia608_control_t_eia608_control_roll_up_2: eia608_control_t = 5157;
pub const eia608_control_t_eia608_control_roll_up_3: eia608_control_t = 5158;
pub const eia608_control_t_eia608_control_roll_up_4: eia608_control_t = 5159;
pub const eia608_control_t_eia608_control_resume_direct_captioning: eia608_control_t = 5161;
pub const eia608_control_t_eia608_control_text_restart: eia608_control_t = 5162;
pub const eia608_control_t_eia608_control_text_resume_text_display: eia608_control_t = 5163;
pub const eia608_control_t_eia608_control_erase_display_memory: eia608_control_t = 5164;
pub const eia608_control_t_eia608_control_carriage_return: eia608_control_t = 5165;
pub const eia608_control_t_eia608_control_erase_non_displayed_memory: eia608_control_t = 5166;
pub const eia608_control_t_eia608_control_end_of_caption: eia608_control_t = 5167;
pub type eia608_control_t = u32;
extern "C" {
    pub fn eia608_control_command(cmd: eia608_control_t, cc: ::std::os::raw::c_int) -> u16;
}
extern "C" {
    pub fn eia608_parse_control(cc_data: u16, cc: *mut ::std::os::raw::c_int) -> eia608_control_t;
}
extern "C" {
    pub fn eia608_from_utf8_1(c: *const utf8_char_t, chan: ::std::os::raw::c_int) -> u16;
}
extern "C" {
    pub fn eia608_from_utf8_2(c1: *const utf8_char_t, c2: *const utf8_char_t) -> u16;
}
extern "C" {
    pub fn eia608_from_basicna(bna1: u16, bna2: u16) -> u16;
}
extern "C" {
    pub fn eia608_to_utf8(
        c: u16,
        chan: *mut ::std::os::raw::c_int,
        char1: *mut utf8_char_t,
        char2: *mut utf8_char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eia608_dump(cc_data: u16);
}
extern "C" {
    pub fn eia608_to_text(
        buf: *mut ::std::os::raw::c_char,
        s: usize,
        cc_data: u16,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xds_t {
    pub state: ::std::os::raw::c_int,
    pub class_code: u8,
    pub type_: u8,
    pub size: u32,
    pub content: [u8; 32usize],
    pub checksum: u8,
}
extern "C" {
    pub fn xds_init(xds: *mut xds_t);
}
extern "C" {
    pub fn xds_decode(xds: *mut xds_t, cc: u16) -> ::std::os::raw::c_int;
}
pub const libcaption_stauts_t_LIBCAPTION_ERROR: libcaption_stauts_t = 0;
pub const libcaption_stauts_t_LIBCAPTION_OK: libcaption_stauts_t = 1;
pub const libcaption_stauts_t_LIBCAPTION_READY: libcaption_stauts_t = 2;
pub const libcaption_stauts_t_LIBCAPTION_CLEAR: libcaption_stauts_t = 3;
pub type libcaption_stauts_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct caption_frame_cell_t {
    pub uln: u8,
    pub sty: u8,
    pub data: [utf8_char_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct caption_frame_buffer_t {
    pub cell: [[caption_frame_cell_t; 32usize]; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct caption_frame_state_t {
    pub uln: u8,
    pub sty: u8,
    pub rup: u8,
    pub row: i8,
    pub col: i8,
    pub cc_data: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct caption_frame_t {
    pub timestamp: f64,
    pub xds: xds_t,
    pub state: caption_frame_state_t,
    pub front: caption_frame_buffer_t,
    pub back: caption_frame_buffer_t,
    pub write: *mut caption_frame_buffer_t,
    pub status: libcaption_stauts_t,
}
extern "C" {
    pub fn caption_frame_init(frame: *mut caption_frame_t);
}
extern "C" {
    pub static _caption_frame_rollup: [::std::os::raw::c_int; 4usize];
}
extern "C" {
    pub fn caption_frame_write_char(
        frame: *mut caption_frame_t,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        style: eia608_style_t,
        underline: ::std::os::raw::c_int,
        c: *const utf8_char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn caption_frame_read_char(
        frame: *mut caption_frame_t,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        style: *mut eia608_style_t,
        underline: *mut ::std::os::raw::c_int,
    ) -> *const utf8_char_t;
}
extern "C" {
    pub fn caption_frame_decode(
        frame: *mut caption_frame_t,
        cc_data: u16,
        timestamp: f64,
    ) -> libcaption_stauts_t;
}
extern "C" {
    pub fn caption_frame_from_text(
        frame: *mut caption_frame_t,
        data: *const utf8_char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn caption_frame_to_text(
        frame: *mut caption_frame_t,
        data: *mut utf8_char_t,
        full: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn caption_frame_dump_buffer(frame: *mut caption_frame_t, buf: *mut utf8_char_t) -> usize;
}
extern "C" {
    pub fn caption_frame_dump(frame: *mut caption_frame_t);
}
